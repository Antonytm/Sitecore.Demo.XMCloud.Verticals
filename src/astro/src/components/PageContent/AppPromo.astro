---
import {
  Field,
  ImageField,
  RichTextField,
} from "@sitecore-jss/sitecore-jss-react";

import {
  Image,
  Text,
  RichText,
  SitecoreContextMap,
} from "@astro-sitecore-jss/astro-sitecore-jss";

interface Fields {
  Title: Field<string>;
  Text: RichTextField;
  Image: ImageField;
}

export type AppPromoProps = {
  params: { [key: string]: string };
  fields: Fields;
};

const props: AppPromoProps = Astro.props.route;
const id = props.params.RenderingIdentifier;
const sitecoreContext = SitecoreContextMap.get()["scContext"];
const isPageEditing = sitecoreContext.pageEditing;
---

<div
  class={`component app-promo ${props.params.styles.trimEnd()}`}
  id={id ? id : undefined}
>
  <div class="container">
    <div class="row row-gap-5 align-items-center g-5">
      <div class="col-lg-6 text-center text-lg-start">
        <h1 class="display-6 fw-bold mb-3">
          <Text field={props.fields.Title} />
        </h1>
        <div class="col-lg-10 fs-5">
          <RichText field={props.fields.Text} />
        </div>
      </div>
      <div class="col-md-10 mx-auto col-lg-6 image-wrapper">
        <Image
          field={props.fields.Image}
          class={`${isPageEditing ? "d-block" : "d-none"} mx-lg-auto img-fluid`}
        />
        <img
          src={props.fields.Image.value?.src}
          alt={props.fields.Image.value?.alt as string}
          class={`${isPageEditing ? "d-none" : "d-block"} mx-lg-auto img-fluid parallax-image`}
          style={{ transformOrigin: "bottom" }}
        />
      </div>
    </div>
  </div>
</div>

<script>
  const image = document.querySelector(".parallax-image") as HTMLElement;

  function isElementInView(element: Element) {
    const rect = element.getBoundingClientRect();
    return rect.top < window.innerHeight && rect.bottom >= 0; // Element is in view (even partially)
  }

  function scaleImageOnScroll(minScale: number, maxScale: number) {
    if (image && isElementInView(image)) {
      const scrollPosition = window.scrollY;
      const imageTop = image.getBoundingClientRect().top + scrollPosition;
      const imageHeight = image.clientHeight; // Height of the image

      // Calculate how much the image has moved into view (from the top of the document to the scroll position)
      const scaleRange = maxScale - minScale;
      const imageVisibleProgress = Math.min(
        1,
        Math.max(
          0,
          (scrollPosition + window.innerHeight - imageTop) /
            (window.innerHeight + imageHeight),
        ),
      );

      // Calculate scale based on how much of the image is visible
      const scale = minScale + imageVisibleProgress * scaleRange;

      image.style.transform = `scale(${scale})`;
    }
  }

  window.addEventListener("scroll", () => {
    scaleImageOnScroll(0.8, 1.2);
  });

  scaleImageOnScroll(0.8, 1.2);
</script>

<style>
  .parallax-image {
    transition: transform 0.1s ease-out;
  }
</style>
